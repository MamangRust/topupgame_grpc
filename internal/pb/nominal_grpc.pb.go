// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.2
// source: nominal.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	NominalService_FindAll_FullMethodName            = "/pb.NominalService/FindAll"
	NominalService_FindById_FullMethodName           = "/pb.NominalService/FindById"
	NominalService_FindByActive_FullMethodName       = "/pb.NominalService/FindByActive"
	NominalService_FindByTrashed_FullMethodName      = "/pb.NominalService/FindByTrashed"
	NominalService_Create_FullMethodName             = "/pb.NominalService/Create"
	NominalService_Update_FullMethodName             = "/pb.NominalService/Update"
	NominalService_Trashed_FullMethodName            = "/pb.NominalService/Trashed"
	NominalService_Restore_FullMethodName            = "/pb.NominalService/Restore"
	NominalService_DeletePermanent_FullMethodName    = "/pb.NominalService/DeletePermanent"
	NominalService_RestoreAll_FullMethodName         = "/pb.NominalService/RestoreAll"
	NominalService_DeleteAllPermanent_FullMethodName = "/pb.NominalService/DeleteAllPermanent"
)

// NominalServiceClient is the client API for NominalService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type NominalServiceClient interface {
	FindAll(ctx context.Context, in *FindAllNominalRequest, opts ...grpc.CallOption) (*ApiResponsePaginationNominal, error)
	FindById(ctx context.Context, in *FindByIdNominalRequest, opts ...grpc.CallOption) (*ApiResponseNominal, error)
	FindByActive(ctx context.Context, in *FindAllNominalRequest, opts ...grpc.CallOption) (*ApiResponsePaginationNominalDeleteAt, error)
	FindByTrashed(ctx context.Context, in *FindAllNominalRequest, opts ...grpc.CallOption) (*ApiResponsePaginationNominalDeleteAt, error)
	Create(ctx context.Context, in *CreateNominalRequest, opts ...grpc.CallOption) (*ApiResponseNominal, error)
	Update(ctx context.Context, in *UpdateNominalRequest, opts ...grpc.CallOption) (*ApiResponseNominal, error)
	Trashed(ctx context.Context, in *FindByIdNominalRequest, opts ...grpc.CallOption) (*ApiResponseNominalDeleteAt, error)
	Restore(ctx context.Context, in *FindByIdNominalRequest, opts ...grpc.CallOption) (*ApiResponseNominalDeleteAt, error)
	DeletePermanent(ctx context.Context, in *FindByIdNominalRequest, opts ...grpc.CallOption) (*ApiResponseNominalDelete, error)
	RestoreAll(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*ApiResponseNominalAll, error)
	DeleteAllPermanent(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*ApiResponseNominalAll, error)
}

type nominalServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewNominalServiceClient(cc grpc.ClientConnInterface) NominalServiceClient {
	return &nominalServiceClient{cc}
}

func (c *nominalServiceClient) FindAll(ctx context.Context, in *FindAllNominalRequest, opts ...grpc.CallOption) (*ApiResponsePaginationNominal, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ApiResponsePaginationNominal)
	err := c.cc.Invoke(ctx, NominalService_FindAll_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nominalServiceClient) FindById(ctx context.Context, in *FindByIdNominalRequest, opts ...grpc.CallOption) (*ApiResponseNominal, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ApiResponseNominal)
	err := c.cc.Invoke(ctx, NominalService_FindById_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nominalServiceClient) FindByActive(ctx context.Context, in *FindAllNominalRequest, opts ...grpc.CallOption) (*ApiResponsePaginationNominalDeleteAt, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ApiResponsePaginationNominalDeleteAt)
	err := c.cc.Invoke(ctx, NominalService_FindByActive_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nominalServiceClient) FindByTrashed(ctx context.Context, in *FindAllNominalRequest, opts ...grpc.CallOption) (*ApiResponsePaginationNominalDeleteAt, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ApiResponsePaginationNominalDeleteAt)
	err := c.cc.Invoke(ctx, NominalService_FindByTrashed_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nominalServiceClient) Create(ctx context.Context, in *CreateNominalRequest, opts ...grpc.CallOption) (*ApiResponseNominal, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ApiResponseNominal)
	err := c.cc.Invoke(ctx, NominalService_Create_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nominalServiceClient) Update(ctx context.Context, in *UpdateNominalRequest, opts ...grpc.CallOption) (*ApiResponseNominal, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ApiResponseNominal)
	err := c.cc.Invoke(ctx, NominalService_Update_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nominalServiceClient) Trashed(ctx context.Context, in *FindByIdNominalRequest, opts ...grpc.CallOption) (*ApiResponseNominalDeleteAt, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ApiResponseNominalDeleteAt)
	err := c.cc.Invoke(ctx, NominalService_Trashed_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nominalServiceClient) Restore(ctx context.Context, in *FindByIdNominalRequest, opts ...grpc.CallOption) (*ApiResponseNominalDeleteAt, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ApiResponseNominalDeleteAt)
	err := c.cc.Invoke(ctx, NominalService_Restore_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nominalServiceClient) DeletePermanent(ctx context.Context, in *FindByIdNominalRequest, opts ...grpc.CallOption) (*ApiResponseNominalDelete, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ApiResponseNominalDelete)
	err := c.cc.Invoke(ctx, NominalService_DeletePermanent_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nominalServiceClient) RestoreAll(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*ApiResponseNominalAll, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ApiResponseNominalAll)
	err := c.cc.Invoke(ctx, NominalService_RestoreAll_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nominalServiceClient) DeleteAllPermanent(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*ApiResponseNominalAll, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ApiResponseNominalAll)
	err := c.cc.Invoke(ctx, NominalService_DeleteAllPermanent_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// NominalServiceServer is the server API for NominalService service.
// All implementations must embed UnimplementedNominalServiceServer
// for forward compatibility.
type NominalServiceServer interface {
	FindAll(context.Context, *FindAllNominalRequest) (*ApiResponsePaginationNominal, error)
	FindById(context.Context, *FindByIdNominalRequest) (*ApiResponseNominal, error)
	FindByActive(context.Context, *FindAllNominalRequest) (*ApiResponsePaginationNominalDeleteAt, error)
	FindByTrashed(context.Context, *FindAllNominalRequest) (*ApiResponsePaginationNominalDeleteAt, error)
	Create(context.Context, *CreateNominalRequest) (*ApiResponseNominal, error)
	Update(context.Context, *UpdateNominalRequest) (*ApiResponseNominal, error)
	Trashed(context.Context, *FindByIdNominalRequest) (*ApiResponseNominalDeleteAt, error)
	Restore(context.Context, *FindByIdNominalRequest) (*ApiResponseNominalDeleteAt, error)
	DeletePermanent(context.Context, *FindByIdNominalRequest) (*ApiResponseNominalDelete, error)
	RestoreAll(context.Context, *emptypb.Empty) (*ApiResponseNominalAll, error)
	DeleteAllPermanent(context.Context, *emptypb.Empty) (*ApiResponseNominalAll, error)
	mustEmbedUnimplementedNominalServiceServer()
}

// UnimplementedNominalServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedNominalServiceServer struct{}

func (UnimplementedNominalServiceServer) FindAll(context.Context, *FindAllNominalRequest) (*ApiResponsePaginationNominal, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindAll not implemented")
}
func (UnimplementedNominalServiceServer) FindById(context.Context, *FindByIdNominalRequest) (*ApiResponseNominal, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindById not implemented")
}
func (UnimplementedNominalServiceServer) FindByActive(context.Context, *FindAllNominalRequest) (*ApiResponsePaginationNominalDeleteAt, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindByActive not implemented")
}
func (UnimplementedNominalServiceServer) FindByTrashed(context.Context, *FindAllNominalRequest) (*ApiResponsePaginationNominalDeleteAt, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindByTrashed not implemented")
}
func (UnimplementedNominalServiceServer) Create(context.Context, *CreateNominalRequest) (*ApiResponseNominal, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedNominalServiceServer) Update(context.Context, *UpdateNominalRequest) (*ApiResponseNominal, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedNominalServiceServer) Trashed(context.Context, *FindByIdNominalRequest) (*ApiResponseNominalDeleteAt, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Trashed not implemented")
}
func (UnimplementedNominalServiceServer) Restore(context.Context, *FindByIdNominalRequest) (*ApiResponseNominalDeleteAt, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Restore not implemented")
}
func (UnimplementedNominalServiceServer) DeletePermanent(context.Context, *FindByIdNominalRequest) (*ApiResponseNominalDelete, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeletePermanent not implemented")
}
func (UnimplementedNominalServiceServer) RestoreAll(context.Context, *emptypb.Empty) (*ApiResponseNominalAll, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RestoreAll not implemented")
}
func (UnimplementedNominalServiceServer) DeleteAllPermanent(context.Context, *emptypb.Empty) (*ApiResponseNominalAll, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteAllPermanent not implemented")
}
func (UnimplementedNominalServiceServer) mustEmbedUnimplementedNominalServiceServer() {}
func (UnimplementedNominalServiceServer) testEmbeddedByValue()                        {}

// UnsafeNominalServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to NominalServiceServer will
// result in compilation errors.
type UnsafeNominalServiceServer interface {
	mustEmbedUnimplementedNominalServiceServer()
}

func RegisterNominalServiceServer(s grpc.ServiceRegistrar, srv NominalServiceServer) {
	// If the following call pancis, it indicates UnimplementedNominalServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&NominalService_ServiceDesc, srv)
}

func _NominalService_FindAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindAllNominalRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NominalServiceServer).FindAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NominalService_FindAll_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NominalServiceServer).FindAll(ctx, req.(*FindAllNominalRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NominalService_FindById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindByIdNominalRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NominalServiceServer).FindById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NominalService_FindById_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NominalServiceServer).FindById(ctx, req.(*FindByIdNominalRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NominalService_FindByActive_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindAllNominalRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NominalServiceServer).FindByActive(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NominalService_FindByActive_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NominalServiceServer).FindByActive(ctx, req.(*FindAllNominalRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NominalService_FindByTrashed_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindAllNominalRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NominalServiceServer).FindByTrashed(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NominalService_FindByTrashed_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NominalServiceServer).FindByTrashed(ctx, req.(*FindAllNominalRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NominalService_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateNominalRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NominalServiceServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NominalService_Create_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NominalServiceServer).Create(ctx, req.(*CreateNominalRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NominalService_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateNominalRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NominalServiceServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NominalService_Update_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NominalServiceServer).Update(ctx, req.(*UpdateNominalRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NominalService_Trashed_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindByIdNominalRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NominalServiceServer).Trashed(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NominalService_Trashed_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NominalServiceServer).Trashed(ctx, req.(*FindByIdNominalRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NominalService_Restore_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindByIdNominalRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NominalServiceServer).Restore(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NominalService_Restore_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NominalServiceServer).Restore(ctx, req.(*FindByIdNominalRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NominalService_DeletePermanent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindByIdNominalRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NominalServiceServer).DeletePermanent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NominalService_DeletePermanent_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NominalServiceServer).DeletePermanent(ctx, req.(*FindByIdNominalRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NominalService_RestoreAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NominalServiceServer).RestoreAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NominalService_RestoreAll_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NominalServiceServer).RestoreAll(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _NominalService_DeleteAllPermanent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NominalServiceServer).DeleteAllPermanent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NominalService_DeleteAllPermanent_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NominalServiceServer).DeleteAllPermanent(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

// NominalService_ServiceDesc is the grpc.ServiceDesc for NominalService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var NominalService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pb.NominalService",
	HandlerType: (*NominalServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "FindAll",
			Handler:    _NominalService_FindAll_Handler,
		},
		{
			MethodName: "FindById",
			Handler:    _NominalService_FindById_Handler,
		},
		{
			MethodName: "FindByActive",
			Handler:    _NominalService_FindByActive_Handler,
		},
		{
			MethodName: "FindByTrashed",
			Handler:    _NominalService_FindByTrashed_Handler,
		},
		{
			MethodName: "Create",
			Handler:    _NominalService_Create_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _NominalService_Update_Handler,
		},
		{
			MethodName: "Trashed",
			Handler:    _NominalService_Trashed_Handler,
		},
		{
			MethodName: "Restore",
			Handler:    _NominalService_Restore_Handler,
		},
		{
			MethodName: "DeletePermanent",
			Handler:    _NominalService_DeletePermanent_Handler,
		},
		{
			MethodName: "RestoreAll",
			Handler:    _NominalService_RestoreAll_Handler,
		},
		{
			MethodName: "DeleteAllPermanent",
			Handler:    _NominalService_DeleteAllPermanent_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "nominal.proto",
}
