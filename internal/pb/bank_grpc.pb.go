// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.2
// source: bank.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	BankService_FindAll_FullMethodName            = "/pb.BankService/FindAll"
	BankService_FindById_FullMethodName           = "/pb.BankService/FindById"
	BankService_FindByActive_FullMethodName       = "/pb.BankService/FindByActive"
	BankService_FindByTrashed_FullMethodName      = "/pb.BankService/FindByTrashed"
	BankService_Create_FullMethodName             = "/pb.BankService/Create"
	BankService_Update_FullMethodName             = "/pb.BankService/Update"
	BankService_Trashed_FullMethodName            = "/pb.BankService/Trashed"
	BankService_Restore_FullMethodName            = "/pb.BankService/Restore"
	BankService_DeletePermanent_FullMethodName    = "/pb.BankService/DeletePermanent"
	BankService_RestoreAll_FullMethodName         = "/pb.BankService/RestoreAll"
	BankService_DeleteAllPermanent_FullMethodName = "/pb.BankService/DeleteAllPermanent"
)

// BankServiceClient is the client API for BankService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BankServiceClient interface {
	FindAll(ctx context.Context, in *FindAllBankRequest, opts ...grpc.CallOption) (*ApiResponsePaginationBank, error)
	FindById(ctx context.Context, in *FindByIdBankRequest, opts ...grpc.CallOption) (*ApiResponseBank, error)
	FindByActive(ctx context.Context, in *FindAllBankRequest, opts ...grpc.CallOption) (*ApiResponsePaginationBankDeleteAt, error)
	FindByTrashed(ctx context.Context, in *FindAllBankRequest, opts ...grpc.CallOption) (*ApiResponsePaginationBankDeleteAt, error)
	Create(ctx context.Context, in *CreateBankRequest, opts ...grpc.CallOption) (*ApiResponseBank, error)
	Update(ctx context.Context, in *UpdateBankRequest, opts ...grpc.CallOption) (*ApiResponseBank, error)
	Trashed(ctx context.Context, in *FindByIdBankRequest, opts ...grpc.CallOption) (*ApiResponseBankDeleteAt, error)
	Restore(ctx context.Context, in *FindByIdBankRequest, opts ...grpc.CallOption) (*ApiResponseBankDeleteAt, error)
	DeletePermanent(ctx context.Context, in *FindByIdBankRequest, opts ...grpc.CallOption) (*ApiResponseBankDelete, error)
	RestoreAll(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*ApiResponseBankAll, error)
	DeleteAllPermanent(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*ApiResponseBankAll, error)
}

type bankServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewBankServiceClient(cc grpc.ClientConnInterface) BankServiceClient {
	return &bankServiceClient{cc}
}

func (c *bankServiceClient) FindAll(ctx context.Context, in *FindAllBankRequest, opts ...grpc.CallOption) (*ApiResponsePaginationBank, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ApiResponsePaginationBank)
	err := c.cc.Invoke(ctx, BankService_FindAll_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bankServiceClient) FindById(ctx context.Context, in *FindByIdBankRequest, opts ...grpc.CallOption) (*ApiResponseBank, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ApiResponseBank)
	err := c.cc.Invoke(ctx, BankService_FindById_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bankServiceClient) FindByActive(ctx context.Context, in *FindAllBankRequest, opts ...grpc.CallOption) (*ApiResponsePaginationBankDeleteAt, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ApiResponsePaginationBankDeleteAt)
	err := c.cc.Invoke(ctx, BankService_FindByActive_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bankServiceClient) FindByTrashed(ctx context.Context, in *FindAllBankRequest, opts ...grpc.CallOption) (*ApiResponsePaginationBankDeleteAt, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ApiResponsePaginationBankDeleteAt)
	err := c.cc.Invoke(ctx, BankService_FindByTrashed_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bankServiceClient) Create(ctx context.Context, in *CreateBankRequest, opts ...grpc.CallOption) (*ApiResponseBank, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ApiResponseBank)
	err := c.cc.Invoke(ctx, BankService_Create_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bankServiceClient) Update(ctx context.Context, in *UpdateBankRequest, opts ...grpc.CallOption) (*ApiResponseBank, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ApiResponseBank)
	err := c.cc.Invoke(ctx, BankService_Update_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bankServiceClient) Trashed(ctx context.Context, in *FindByIdBankRequest, opts ...grpc.CallOption) (*ApiResponseBankDeleteAt, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ApiResponseBankDeleteAt)
	err := c.cc.Invoke(ctx, BankService_Trashed_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bankServiceClient) Restore(ctx context.Context, in *FindByIdBankRequest, opts ...grpc.CallOption) (*ApiResponseBankDeleteAt, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ApiResponseBankDeleteAt)
	err := c.cc.Invoke(ctx, BankService_Restore_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bankServiceClient) DeletePermanent(ctx context.Context, in *FindByIdBankRequest, opts ...grpc.CallOption) (*ApiResponseBankDelete, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ApiResponseBankDelete)
	err := c.cc.Invoke(ctx, BankService_DeletePermanent_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bankServiceClient) RestoreAll(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*ApiResponseBankAll, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ApiResponseBankAll)
	err := c.cc.Invoke(ctx, BankService_RestoreAll_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bankServiceClient) DeleteAllPermanent(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*ApiResponseBankAll, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ApiResponseBankAll)
	err := c.cc.Invoke(ctx, BankService_DeleteAllPermanent_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BankServiceServer is the server API for BankService service.
// All implementations must embed UnimplementedBankServiceServer
// for forward compatibility.
type BankServiceServer interface {
	FindAll(context.Context, *FindAllBankRequest) (*ApiResponsePaginationBank, error)
	FindById(context.Context, *FindByIdBankRequest) (*ApiResponseBank, error)
	FindByActive(context.Context, *FindAllBankRequest) (*ApiResponsePaginationBankDeleteAt, error)
	FindByTrashed(context.Context, *FindAllBankRequest) (*ApiResponsePaginationBankDeleteAt, error)
	Create(context.Context, *CreateBankRequest) (*ApiResponseBank, error)
	Update(context.Context, *UpdateBankRequest) (*ApiResponseBank, error)
	Trashed(context.Context, *FindByIdBankRequest) (*ApiResponseBankDeleteAt, error)
	Restore(context.Context, *FindByIdBankRequest) (*ApiResponseBankDeleteAt, error)
	DeletePermanent(context.Context, *FindByIdBankRequest) (*ApiResponseBankDelete, error)
	RestoreAll(context.Context, *emptypb.Empty) (*ApiResponseBankAll, error)
	DeleteAllPermanent(context.Context, *emptypb.Empty) (*ApiResponseBankAll, error)
	mustEmbedUnimplementedBankServiceServer()
}

// UnimplementedBankServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedBankServiceServer struct{}

func (UnimplementedBankServiceServer) FindAll(context.Context, *FindAllBankRequest) (*ApiResponsePaginationBank, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindAll not implemented")
}
func (UnimplementedBankServiceServer) FindById(context.Context, *FindByIdBankRequest) (*ApiResponseBank, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindById not implemented")
}
func (UnimplementedBankServiceServer) FindByActive(context.Context, *FindAllBankRequest) (*ApiResponsePaginationBankDeleteAt, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindByActive not implemented")
}
func (UnimplementedBankServiceServer) FindByTrashed(context.Context, *FindAllBankRequest) (*ApiResponsePaginationBankDeleteAt, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindByTrashed not implemented")
}
func (UnimplementedBankServiceServer) Create(context.Context, *CreateBankRequest) (*ApiResponseBank, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedBankServiceServer) Update(context.Context, *UpdateBankRequest) (*ApiResponseBank, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedBankServiceServer) Trashed(context.Context, *FindByIdBankRequest) (*ApiResponseBankDeleteAt, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Trashed not implemented")
}
func (UnimplementedBankServiceServer) Restore(context.Context, *FindByIdBankRequest) (*ApiResponseBankDeleteAt, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Restore not implemented")
}
func (UnimplementedBankServiceServer) DeletePermanent(context.Context, *FindByIdBankRequest) (*ApiResponseBankDelete, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeletePermanent not implemented")
}
func (UnimplementedBankServiceServer) RestoreAll(context.Context, *emptypb.Empty) (*ApiResponseBankAll, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RestoreAll not implemented")
}
func (UnimplementedBankServiceServer) DeleteAllPermanent(context.Context, *emptypb.Empty) (*ApiResponseBankAll, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteAllPermanent not implemented")
}
func (UnimplementedBankServiceServer) mustEmbedUnimplementedBankServiceServer() {}
func (UnimplementedBankServiceServer) testEmbeddedByValue()                     {}

// UnsafeBankServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BankServiceServer will
// result in compilation errors.
type UnsafeBankServiceServer interface {
	mustEmbedUnimplementedBankServiceServer()
}

func RegisterBankServiceServer(s grpc.ServiceRegistrar, srv BankServiceServer) {
	// If the following call pancis, it indicates UnimplementedBankServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&BankService_ServiceDesc, srv)
}

func _BankService_FindAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindAllBankRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BankServiceServer).FindAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BankService_FindAll_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BankServiceServer).FindAll(ctx, req.(*FindAllBankRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BankService_FindById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindByIdBankRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BankServiceServer).FindById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BankService_FindById_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BankServiceServer).FindById(ctx, req.(*FindByIdBankRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BankService_FindByActive_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindAllBankRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BankServiceServer).FindByActive(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BankService_FindByActive_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BankServiceServer).FindByActive(ctx, req.(*FindAllBankRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BankService_FindByTrashed_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindAllBankRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BankServiceServer).FindByTrashed(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BankService_FindByTrashed_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BankServiceServer).FindByTrashed(ctx, req.(*FindAllBankRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BankService_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateBankRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BankServiceServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BankService_Create_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BankServiceServer).Create(ctx, req.(*CreateBankRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BankService_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateBankRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BankServiceServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BankService_Update_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BankServiceServer).Update(ctx, req.(*UpdateBankRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BankService_Trashed_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindByIdBankRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BankServiceServer).Trashed(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BankService_Trashed_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BankServiceServer).Trashed(ctx, req.(*FindByIdBankRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BankService_Restore_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindByIdBankRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BankServiceServer).Restore(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BankService_Restore_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BankServiceServer).Restore(ctx, req.(*FindByIdBankRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BankService_DeletePermanent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindByIdBankRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BankServiceServer).DeletePermanent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BankService_DeletePermanent_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BankServiceServer).DeletePermanent(ctx, req.(*FindByIdBankRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BankService_RestoreAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BankServiceServer).RestoreAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BankService_RestoreAll_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BankServiceServer).RestoreAll(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _BankService_DeleteAllPermanent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BankServiceServer).DeleteAllPermanent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BankService_DeleteAllPermanent_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BankServiceServer).DeleteAllPermanent(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

// BankService_ServiceDesc is the grpc.ServiceDesc for BankService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var BankService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pb.BankService",
	HandlerType: (*BankServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "FindAll",
			Handler:    _BankService_FindAll_Handler,
		},
		{
			MethodName: "FindById",
			Handler:    _BankService_FindById_Handler,
		},
		{
			MethodName: "FindByActive",
			Handler:    _BankService_FindByActive_Handler,
		},
		{
			MethodName: "FindByTrashed",
			Handler:    _BankService_FindByTrashed_Handler,
		},
		{
			MethodName: "Create",
			Handler:    _BankService_Create_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _BankService_Update_Handler,
		},
		{
			MethodName: "Trashed",
			Handler:    _BankService_Trashed_Handler,
		},
		{
			MethodName: "Restore",
			Handler:    _BankService_Restore_Handler,
		},
		{
			MethodName: "DeletePermanent",
			Handler:    _BankService_DeletePermanent_Handler,
		},
		{
			MethodName: "RestoreAll",
			Handler:    _BankService_RestoreAll_Handler,
		},
		{
			MethodName: "DeleteAllPermanent",
			Handler:    _BankService_DeleteAllPermanent_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "bank.proto",
}
