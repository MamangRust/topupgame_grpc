// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: banks.sql

package db

import (
	"context"
	"database/sql"
)

const createBank = `-- name: CreateBank :one
INSERT INTO banks (name)
VALUES ($1)
  RETURNING bank_id, name, created_at, updated_at, deleted_at
`

// Create Bank
func (q *Queries) CreateBank(ctx context.Context, name string) (*Bank, error) {
	row := q.db.QueryRowContext(ctx, createBank, name)
	var i Bank
	err := row.Scan(
		&i.BankID,
		&i.Name,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return &i, err
}

const deleteAllPermanentBanks = `-- name: DeleteAllPermanentBanks :exec
DELETE FROM banks WHERE deleted_at IS NOT NULL
`

// Delete All Trashed Banks Permanently
func (q *Queries) DeleteAllPermanentBanks(ctx context.Context) error {
	_, err := q.db.ExecContext(ctx, deleteAllPermanentBanks)
	return err
}

const deleteBankPermanently = `-- name: DeleteBankPermanently :exec
DELETE FROM banks WHERE bank_id = $1 AND deleted_at IS NOT NULL
`

// Delete Bank Permanently
func (q *Queries) DeleteBankPermanently(ctx context.Context, bankID int32) error {
	_, err := q.db.ExecContext(ctx, deleteBankPermanently, bankID)
	return err
}

const getBankByID = `-- name: GetBankByID :one
SELECT bank_id, name, created_at, updated_at, deleted_at
FROM banks
WHERE bank_id = $1
  AND deleted_at IS NULL
`

// Get Bank by ID
func (q *Queries) GetBankByID(ctx context.Context, bankID int32) (*Bank, error) {
	row := q.db.QueryRowContext(ctx, getBankByID, bankID)
	var i Bank
	err := row.Scan(
		&i.BankID,
		&i.Name,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return &i, err
}

const getBanks = `-- name: GetBanks :many
SELECT
    bank_id, name, created_at, updated_at, deleted_at,
    COUNT(*) OVER() AS total_count
FROM banks
WHERE deleted_at IS NULL
AND ($1::TEXT IS NULL OR name ILIKE '%' || $1 || '%')
ORDER BY created_at DESC
LIMIT $2 OFFSET $3
`

type GetBanksParams struct {
	Column1 string `json:"column_1"`
	Limit   int32  `json:"limit"`
	Offset  int32  `json:"offset"`
}

type GetBanksRow struct {
	BankID     int32        `json:"bank_id"`
	Name       string       `json:"name"`
	CreatedAt  sql.NullTime `json:"created_at"`
	UpdatedAt  sql.NullTime `json:"updated_at"`
	DeletedAt  sql.NullTime `json:"deleted_at"`
	TotalCount int64        `json:"total_count"`
}

// Get Banks with Pagination and Total Count
func (q *Queries) GetBanks(ctx context.Context, arg GetBanksParams) ([]*GetBanksRow, error) {
	rows, err := q.db.QueryContext(ctx, getBanks, arg.Column1, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []*GetBanksRow
	for rows.Next() {
		var i GetBanksRow
		if err := rows.Scan(
			&i.BankID,
			&i.Name,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.DeletedAt,
			&i.TotalCount,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getBanksActive = `-- name: GetBanksActive :many
SELECT
    bank_id, name, created_at, updated_at, deleted_at,
    COUNT(*) OVER() AS total_count
FROM banks
WHERE deleted_at IS NULL
AND ($1::TEXT IS NULL OR name ILIKE '%' || $1 || '%')
ORDER BY created_at DESC
LIMIT $2 OFFSET $3
`

type GetBanksActiveParams struct {
	Column1 string `json:"column_1"`
	Limit   int32  `json:"limit"`
	Offset  int32  `json:"offset"`
}

type GetBanksActiveRow struct {
	BankID     int32        `json:"bank_id"`
	Name       string       `json:"name"`
	CreatedAt  sql.NullTime `json:"created_at"`
	UpdatedAt  sql.NullTime `json:"updated_at"`
	DeletedAt  sql.NullTime `json:"deleted_at"`
	TotalCount int64        `json:"total_count"`
}

// Get Active Banks with Pagination and Total Count
func (q *Queries) GetBanksActive(ctx context.Context, arg GetBanksActiveParams) ([]*GetBanksActiveRow, error) {
	rows, err := q.db.QueryContext(ctx, getBanksActive, arg.Column1, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []*GetBanksActiveRow
	for rows.Next() {
		var i GetBanksActiveRow
		if err := rows.Scan(
			&i.BankID,
			&i.Name,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.DeletedAt,
			&i.TotalCount,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getBanksTrashed = `-- name: GetBanksTrashed :many
SELECT
    bank_id, name, created_at, updated_at, deleted_at,
    COUNT(*) OVER() AS total_count
FROM banks
WHERE deleted_at IS NOT NULL
AND ($1::TEXT IS NULL OR name ILIKE '%' || $1 || '%')
ORDER BY created_at DESC
LIMIT $2 OFFSET $3
`

type GetBanksTrashedParams struct {
	Column1 string `json:"column_1"`
	Limit   int32  `json:"limit"`
	Offset  int32  `json:"offset"`
}

type GetBanksTrashedRow struct {
	BankID     int32        `json:"bank_id"`
	Name       string       `json:"name"`
	CreatedAt  sql.NullTime `json:"created_at"`
	UpdatedAt  sql.NullTime `json:"updated_at"`
	DeletedAt  sql.NullTime `json:"deleted_at"`
	TotalCount int64        `json:"total_count"`
}

// Get Trashed Banks with Pagination and Total Count
func (q *Queries) GetBanksTrashed(ctx context.Context, arg GetBanksTrashedParams) ([]*GetBanksTrashedRow, error) {
	rows, err := q.db.QueryContext(ctx, getBanksTrashed, arg.Column1, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []*GetBanksTrashedRow
	for rows.Next() {
		var i GetBanksTrashedRow
		if err := rows.Scan(
			&i.BankID,
			&i.Name,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.DeletedAt,
			&i.TotalCount,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const restoreAllBanks = `-- name: RestoreAllBanks :exec
UPDATE banks
SET deleted_at = NULL
WHERE deleted_at IS NOT NULL
`

// Restore All Trashed Banks
func (q *Queries) RestoreAllBanks(ctx context.Context) error {
	_, err := q.db.ExecContext(ctx, restoreAllBanks)
	return err
}

const restoreBank = `-- name: RestoreBank :one
UPDATE banks
SET deleted_at = NULL
WHERE bank_id = $1
  AND deleted_at IS NOT NULL
  RETURNING bank_id, name, created_at, updated_at, deleted_at
`

// Restore Trashed Bank
func (q *Queries) RestoreBank(ctx context.Context, bankID int32) (*Bank, error) {
	row := q.db.QueryRowContext(ctx, restoreBank, bankID)
	var i Bank
	err := row.Scan(
		&i.BankID,
		&i.Name,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return &i, err
}

const trashBank = `-- name: TrashBank :one
UPDATE banks
SET deleted_at = CURRENT_TIMESTAMP
WHERE bank_id = $1
  AND deleted_at IS NULL
  RETURNING bank_id, name, created_at, updated_at, deleted_at
`

// Trash Bank (Soft Delete)
func (q *Queries) TrashBank(ctx context.Context, bankID int32) (*Bank, error) {
	row := q.db.QueryRowContext(ctx, trashBank, bankID)
	var i Bank
	err := row.Scan(
		&i.BankID,
		&i.Name,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return &i, err
}

const updateBank = `-- name: UpdateBank :one
UPDATE banks
SET name = $2,
    updated_at = CURRENT_TIMESTAMP
WHERE bank_id = $1
  AND deleted_at IS NULL
  RETURNING bank_id, name, created_at, updated_at, deleted_at
`

type UpdateBankParams struct {
	BankID int32  `json:"bank_id"`
	Name   string `json:"name"`
}

// Update Bank
func (q *Queries) UpdateBank(ctx context.Context, arg UpdateBankParams) (*Bank, error) {
	row := q.db.QueryRowContext(ctx, updateBank, arg.BankID, arg.Name)
	var i Bank
	err := row.Scan(
		&i.BankID,
		&i.Name,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return &i, err
}
