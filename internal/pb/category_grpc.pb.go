// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.2
// source: category.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	CategoryService_FindAll_FullMethodName            = "/pb.CategoryService/FindAll"
	CategoryService_FindById_FullMethodName           = "/pb.CategoryService/FindById"
	CategoryService_FindByActive_FullMethodName       = "/pb.CategoryService/FindByActive"
	CategoryService_FindByTrashed_FullMethodName      = "/pb.CategoryService/FindByTrashed"
	CategoryService_Create_FullMethodName             = "/pb.CategoryService/Create"
	CategoryService_Update_FullMethodName             = "/pb.CategoryService/Update"
	CategoryService_Trashed_FullMethodName            = "/pb.CategoryService/Trashed"
	CategoryService_Restore_FullMethodName            = "/pb.CategoryService/Restore"
	CategoryService_DeletePermanent_FullMethodName    = "/pb.CategoryService/DeletePermanent"
	CategoryService_RestoreAll_FullMethodName         = "/pb.CategoryService/RestoreAll"
	CategoryService_DeleteAllPermanent_FullMethodName = "/pb.CategoryService/DeleteAllPermanent"
)

// CategoryServiceClient is the client API for CategoryService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CategoryServiceClient interface {
	FindAll(ctx context.Context, in *FindAllCategoryRequest, opts ...grpc.CallOption) (*ApiResponsePaginationCategory, error)
	FindById(ctx context.Context, in *FindByIdCategoryRequest, opts ...grpc.CallOption) (*ApiResponseCategory, error)
	FindByActive(ctx context.Context, in *FindAllCategoryRequest, opts ...grpc.CallOption) (*ApiResponsePaginationCategoryDeleteAt, error)
	FindByTrashed(ctx context.Context, in *FindAllCategoryRequest, opts ...grpc.CallOption) (*ApiResponsePaginationCategoryDeleteAt, error)
	Create(ctx context.Context, in *CreateCategoryRequest, opts ...grpc.CallOption) (*ApiResponseCategory, error)
	Update(ctx context.Context, in *UpdateCategoryRequest, opts ...grpc.CallOption) (*ApiResponseCategory, error)
	Trashed(ctx context.Context, in *FindByIdCategoryRequest, opts ...grpc.CallOption) (*ApiResponseCategoryDeleteAt, error)
	Restore(ctx context.Context, in *FindByIdCategoryRequest, opts ...grpc.CallOption) (*ApiResponseCategoryDeleteAt, error)
	DeletePermanent(ctx context.Context, in *FindByIdCategoryRequest, opts ...grpc.CallOption) (*ApiResponseCategoryDelete, error)
	RestoreAll(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*ApiResponseCategoryAll, error)
	DeleteAllPermanent(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*ApiResponseCategoryAll, error)
}

type categoryServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewCategoryServiceClient(cc grpc.ClientConnInterface) CategoryServiceClient {
	return &categoryServiceClient{cc}
}

func (c *categoryServiceClient) FindAll(ctx context.Context, in *FindAllCategoryRequest, opts ...grpc.CallOption) (*ApiResponsePaginationCategory, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ApiResponsePaginationCategory)
	err := c.cc.Invoke(ctx, CategoryService_FindAll_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *categoryServiceClient) FindById(ctx context.Context, in *FindByIdCategoryRequest, opts ...grpc.CallOption) (*ApiResponseCategory, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ApiResponseCategory)
	err := c.cc.Invoke(ctx, CategoryService_FindById_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *categoryServiceClient) FindByActive(ctx context.Context, in *FindAllCategoryRequest, opts ...grpc.CallOption) (*ApiResponsePaginationCategoryDeleteAt, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ApiResponsePaginationCategoryDeleteAt)
	err := c.cc.Invoke(ctx, CategoryService_FindByActive_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *categoryServiceClient) FindByTrashed(ctx context.Context, in *FindAllCategoryRequest, opts ...grpc.CallOption) (*ApiResponsePaginationCategoryDeleteAt, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ApiResponsePaginationCategoryDeleteAt)
	err := c.cc.Invoke(ctx, CategoryService_FindByTrashed_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *categoryServiceClient) Create(ctx context.Context, in *CreateCategoryRequest, opts ...grpc.CallOption) (*ApiResponseCategory, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ApiResponseCategory)
	err := c.cc.Invoke(ctx, CategoryService_Create_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *categoryServiceClient) Update(ctx context.Context, in *UpdateCategoryRequest, opts ...grpc.CallOption) (*ApiResponseCategory, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ApiResponseCategory)
	err := c.cc.Invoke(ctx, CategoryService_Update_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *categoryServiceClient) Trashed(ctx context.Context, in *FindByIdCategoryRequest, opts ...grpc.CallOption) (*ApiResponseCategoryDeleteAt, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ApiResponseCategoryDeleteAt)
	err := c.cc.Invoke(ctx, CategoryService_Trashed_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *categoryServiceClient) Restore(ctx context.Context, in *FindByIdCategoryRequest, opts ...grpc.CallOption) (*ApiResponseCategoryDeleteAt, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ApiResponseCategoryDeleteAt)
	err := c.cc.Invoke(ctx, CategoryService_Restore_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *categoryServiceClient) DeletePermanent(ctx context.Context, in *FindByIdCategoryRequest, opts ...grpc.CallOption) (*ApiResponseCategoryDelete, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ApiResponseCategoryDelete)
	err := c.cc.Invoke(ctx, CategoryService_DeletePermanent_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *categoryServiceClient) RestoreAll(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*ApiResponseCategoryAll, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ApiResponseCategoryAll)
	err := c.cc.Invoke(ctx, CategoryService_RestoreAll_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *categoryServiceClient) DeleteAllPermanent(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*ApiResponseCategoryAll, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ApiResponseCategoryAll)
	err := c.cc.Invoke(ctx, CategoryService_DeleteAllPermanent_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CategoryServiceServer is the server API for CategoryService service.
// All implementations must embed UnimplementedCategoryServiceServer
// for forward compatibility.
type CategoryServiceServer interface {
	FindAll(context.Context, *FindAllCategoryRequest) (*ApiResponsePaginationCategory, error)
	FindById(context.Context, *FindByIdCategoryRequest) (*ApiResponseCategory, error)
	FindByActive(context.Context, *FindAllCategoryRequest) (*ApiResponsePaginationCategoryDeleteAt, error)
	FindByTrashed(context.Context, *FindAllCategoryRequest) (*ApiResponsePaginationCategoryDeleteAt, error)
	Create(context.Context, *CreateCategoryRequest) (*ApiResponseCategory, error)
	Update(context.Context, *UpdateCategoryRequest) (*ApiResponseCategory, error)
	Trashed(context.Context, *FindByIdCategoryRequest) (*ApiResponseCategoryDeleteAt, error)
	Restore(context.Context, *FindByIdCategoryRequest) (*ApiResponseCategoryDeleteAt, error)
	DeletePermanent(context.Context, *FindByIdCategoryRequest) (*ApiResponseCategoryDelete, error)
	RestoreAll(context.Context, *emptypb.Empty) (*ApiResponseCategoryAll, error)
	DeleteAllPermanent(context.Context, *emptypb.Empty) (*ApiResponseCategoryAll, error)
	mustEmbedUnimplementedCategoryServiceServer()
}

// UnimplementedCategoryServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedCategoryServiceServer struct{}

func (UnimplementedCategoryServiceServer) FindAll(context.Context, *FindAllCategoryRequest) (*ApiResponsePaginationCategory, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindAll not implemented")
}
func (UnimplementedCategoryServiceServer) FindById(context.Context, *FindByIdCategoryRequest) (*ApiResponseCategory, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindById not implemented")
}
func (UnimplementedCategoryServiceServer) FindByActive(context.Context, *FindAllCategoryRequest) (*ApiResponsePaginationCategoryDeleteAt, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindByActive not implemented")
}
func (UnimplementedCategoryServiceServer) FindByTrashed(context.Context, *FindAllCategoryRequest) (*ApiResponsePaginationCategoryDeleteAt, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindByTrashed not implemented")
}
func (UnimplementedCategoryServiceServer) Create(context.Context, *CreateCategoryRequest) (*ApiResponseCategory, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedCategoryServiceServer) Update(context.Context, *UpdateCategoryRequest) (*ApiResponseCategory, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedCategoryServiceServer) Trashed(context.Context, *FindByIdCategoryRequest) (*ApiResponseCategoryDeleteAt, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Trashed not implemented")
}
func (UnimplementedCategoryServiceServer) Restore(context.Context, *FindByIdCategoryRequest) (*ApiResponseCategoryDeleteAt, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Restore not implemented")
}
func (UnimplementedCategoryServiceServer) DeletePermanent(context.Context, *FindByIdCategoryRequest) (*ApiResponseCategoryDelete, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeletePermanent not implemented")
}
func (UnimplementedCategoryServiceServer) RestoreAll(context.Context, *emptypb.Empty) (*ApiResponseCategoryAll, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RestoreAll not implemented")
}
func (UnimplementedCategoryServiceServer) DeleteAllPermanent(context.Context, *emptypb.Empty) (*ApiResponseCategoryAll, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteAllPermanent not implemented")
}
func (UnimplementedCategoryServiceServer) mustEmbedUnimplementedCategoryServiceServer() {}
func (UnimplementedCategoryServiceServer) testEmbeddedByValue()                         {}

// UnsafeCategoryServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CategoryServiceServer will
// result in compilation errors.
type UnsafeCategoryServiceServer interface {
	mustEmbedUnimplementedCategoryServiceServer()
}

func RegisterCategoryServiceServer(s grpc.ServiceRegistrar, srv CategoryServiceServer) {
	// If the following call pancis, it indicates UnimplementedCategoryServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&CategoryService_ServiceDesc, srv)
}

func _CategoryService_FindAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindAllCategoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CategoryServiceServer).FindAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CategoryService_FindAll_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CategoryServiceServer).FindAll(ctx, req.(*FindAllCategoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CategoryService_FindById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindByIdCategoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CategoryServiceServer).FindById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CategoryService_FindById_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CategoryServiceServer).FindById(ctx, req.(*FindByIdCategoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CategoryService_FindByActive_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindAllCategoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CategoryServiceServer).FindByActive(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CategoryService_FindByActive_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CategoryServiceServer).FindByActive(ctx, req.(*FindAllCategoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CategoryService_FindByTrashed_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindAllCategoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CategoryServiceServer).FindByTrashed(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CategoryService_FindByTrashed_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CategoryServiceServer).FindByTrashed(ctx, req.(*FindAllCategoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CategoryService_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateCategoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CategoryServiceServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CategoryService_Create_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CategoryServiceServer).Create(ctx, req.(*CreateCategoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CategoryService_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateCategoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CategoryServiceServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CategoryService_Update_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CategoryServiceServer).Update(ctx, req.(*UpdateCategoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CategoryService_Trashed_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindByIdCategoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CategoryServiceServer).Trashed(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CategoryService_Trashed_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CategoryServiceServer).Trashed(ctx, req.(*FindByIdCategoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CategoryService_Restore_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindByIdCategoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CategoryServiceServer).Restore(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CategoryService_Restore_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CategoryServiceServer).Restore(ctx, req.(*FindByIdCategoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CategoryService_DeletePermanent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindByIdCategoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CategoryServiceServer).DeletePermanent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CategoryService_DeletePermanent_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CategoryServiceServer).DeletePermanent(ctx, req.(*FindByIdCategoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CategoryService_RestoreAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CategoryServiceServer).RestoreAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CategoryService_RestoreAll_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CategoryServiceServer).RestoreAll(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _CategoryService_DeleteAllPermanent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CategoryServiceServer).DeleteAllPermanent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CategoryService_DeleteAllPermanent_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CategoryServiceServer).DeleteAllPermanent(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

// CategoryService_ServiceDesc is the grpc.ServiceDesc for CategoryService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CategoryService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pb.CategoryService",
	HandlerType: (*CategoryServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "FindAll",
			Handler:    _CategoryService_FindAll_Handler,
		},
		{
			MethodName: "FindById",
			Handler:    _CategoryService_FindById_Handler,
		},
		{
			MethodName: "FindByActive",
			Handler:    _CategoryService_FindByActive_Handler,
		},
		{
			MethodName: "FindByTrashed",
			Handler:    _CategoryService_FindByTrashed_Handler,
		},
		{
			MethodName: "Create",
			Handler:    _CategoryService_Create_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _CategoryService_Update_Handler,
		},
		{
			MethodName: "Trashed",
			Handler:    _CategoryService_Trashed_Handler,
		},
		{
			MethodName: "Restore",
			Handler:    _CategoryService_Restore_Handler,
		},
		{
			MethodName: "DeletePermanent",
			Handler:    _CategoryService_DeletePermanent_Handler,
		},
		{
			MethodName: "RestoreAll",
			Handler:    _CategoryService_RestoreAll_Handler,
		},
		{
			MethodName: "DeleteAllPermanent",
			Handler:    _CategoryService_DeleteAllPermanent_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "category.proto",
}
