// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: transactions.sql

package db

import (
	"context"
	"database/sql"
)

const createTransaction = `-- name: CreateTransaction :one
INSERT INTO transactions (user_id, merchant_id, voucher_id, nominal_id, category_id, bank_id, payment_method, status)
VALUES ($1, $2, $3, $4, $5, $6, $7, $8)
  RETURNING transaction_id, user_id, merchant_id, voucher_id, nominal_id, category_id, bank_id, payment_method, status, created_at, updated_at, deleted_at
`

type CreateTransactionParams struct {
	UserID        int32          `json:"user_id"`
	MerchantID    sql.NullInt32  `json:"merchant_id"`
	VoucherID     sql.NullInt32  `json:"voucher_id"`
	NominalID     sql.NullInt32  `json:"nominal_id"`
	CategoryID    sql.NullInt32  `json:"category_id"`
	BankID        sql.NullInt32  `json:"bank_id"`
	PaymentMethod string         `json:"payment_method"`
	Status        sql.NullString `json:"status"`
}

// Create Transaction
func (q *Queries) CreateTransaction(ctx context.Context, arg CreateTransactionParams) (*Transaction, error) {
	row := q.db.QueryRowContext(ctx, createTransaction,
		arg.UserID,
		arg.MerchantID,
		arg.VoucherID,
		arg.NominalID,
		arg.CategoryID,
		arg.BankID,
		arg.PaymentMethod,
		arg.Status,
	)
	var i Transaction
	err := row.Scan(
		&i.TransactionID,
		&i.UserID,
		&i.MerchantID,
		&i.VoucherID,
		&i.NominalID,
		&i.CategoryID,
		&i.BankID,
		&i.PaymentMethod,
		&i.Status,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return &i, err
}

const deleteAllPermanentTransactions = `-- name: DeleteAllPermanentTransactions :exec
DELETE FROM transactions WHERE deleted_at IS NOT NULL
`

// Delete All Trashed Transactions Permanently
func (q *Queries) DeleteAllPermanentTransactions(ctx context.Context) error {
	_, err := q.db.ExecContext(ctx, deleteAllPermanentTransactions)
	return err
}

const deleteTransactionPermanently = `-- name: DeleteTransactionPermanently :exec
DELETE FROM transactions WHERE transaction_id = $1 AND deleted_at IS NOT NULL
`

// Delete Transaction Permanently
func (q *Queries) DeleteTransactionPermanently(ctx context.Context, transactionID int32) error {
	_, err := q.db.ExecContext(ctx, deleteTransactionPermanently, transactionID)
	return err
}

const getTransactionByID = `-- name: GetTransactionByID :one
SELECT transaction_id, user_id, merchant_id, voucher_id, nominal_id, category_id, bank_id, payment_method, status, created_at, updated_at, deleted_at
FROM transactions
WHERE transaction_id = $1
  AND deleted_at IS NULL
`

// Get Transaction by ID
func (q *Queries) GetTransactionByID(ctx context.Context, transactionID int32) (*Transaction, error) {
	row := q.db.QueryRowContext(ctx, getTransactionByID, transactionID)
	var i Transaction
	err := row.Scan(
		&i.TransactionID,
		&i.UserID,
		&i.MerchantID,
		&i.VoucherID,
		&i.NominalID,
		&i.CategoryID,
		&i.BankID,
		&i.PaymentMethod,
		&i.Status,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return &i, err
}

const getTransactions = `-- name: GetTransactions :many
SELECT
    transaction_id, user_id, merchant_id, voucher_id, nominal_id, category_id, bank_id, payment_method, status, created_at, updated_at, deleted_at,
    COUNT(*) OVER() AS total_count
FROM transactions
WHERE deleted_at IS NULL
AND ($1::TEXT IS NULL OR payment_method ILIKE '%' || $1 || '%')
ORDER BY created_at DESC
LIMIT $2 OFFSET $3
`

type GetTransactionsParams struct {
	Column1 string `json:"column_1"`
	Limit   int32  `json:"limit"`
	Offset  int32  `json:"offset"`
}

type GetTransactionsRow struct {
	TransactionID int32          `json:"transaction_id"`
	UserID        int32          `json:"user_id"`
	MerchantID    sql.NullInt32  `json:"merchant_id"`
	VoucherID     sql.NullInt32  `json:"voucher_id"`
	NominalID     sql.NullInt32  `json:"nominal_id"`
	CategoryID    sql.NullInt32  `json:"category_id"`
	BankID        sql.NullInt32  `json:"bank_id"`
	PaymentMethod string         `json:"payment_method"`
	Status        sql.NullString `json:"status"`
	CreatedAt     sql.NullTime   `json:"created_at"`
	UpdatedAt     sql.NullTime   `json:"updated_at"`
	DeletedAt     sql.NullTime   `json:"deleted_at"`
	TotalCount    int64          `json:"total_count"`
}

// Get Transactions with Pagination and Total Count
func (q *Queries) GetTransactions(ctx context.Context, arg GetTransactionsParams) ([]*GetTransactionsRow, error) {
	rows, err := q.db.QueryContext(ctx, getTransactions, arg.Column1, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []*GetTransactionsRow
	for rows.Next() {
		var i GetTransactionsRow
		if err := rows.Scan(
			&i.TransactionID,
			&i.UserID,
			&i.MerchantID,
			&i.VoucherID,
			&i.NominalID,
			&i.CategoryID,
			&i.BankID,
			&i.PaymentMethod,
			&i.Status,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.DeletedAt,
			&i.TotalCount,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getTransactionsActive = `-- name: GetTransactionsActive :many
SELECT
    transaction_id, user_id, merchant_id, voucher_id, nominal_id, category_id, bank_id, payment_method, status, created_at, updated_at, deleted_at,
    COUNT(*) OVER() AS total_count
FROM transactions
WHERE deleted_at IS NULL
AND ($1::TEXT IS NULL OR payment_method ILIKE '%' || $1 || '%')
ORDER BY created_at DESC
LIMIT $2 OFFSET $3
`

type GetTransactionsActiveParams struct {
	Column1 string `json:"column_1"`
	Limit   int32  `json:"limit"`
	Offset  int32  `json:"offset"`
}

type GetTransactionsActiveRow struct {
	TransactionID int32          `json:"transaction_id"`
	UserID        int32          `json:"user_id"`
	MerchantID    sql.NullInt32  `json:"merchant_id"`
	VoucherID     sql.NullInt32  `json:"voucher_id"`
	NominalID     sql.NullInt32  `json:"nominal_id"`
	CategoryID    sql.NullInt32  `json:"category_id"`
	BankID        sql.NullInt32  `json:"bank_id"`
	PaymentMethod string         `json:"payment_method"`
	Status        sql.NullString `json:"status"`
	CreatedAt     sql.NullTime   `json:"created_at"`
	UpdatedAt     sql.NullTime   `json:"updated_at"`
	DeletedAt     sql.NullTime   `json:"deleted_at"`
	TotalCount    int64          `json:"total_count"`
}

// Get Active Transactions with Pagination and Total Count
func (q *Queries) GetTransactionsActive(ctx context.Context, arg GetTransactionsActiveParams) ([]*GetTransactionsActiveRow, error) {
	rows, err := q.db.QueryContext(ctx, getTransactionsActive, arg.Column1, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []*GetTransactionsActiveRow
	for rows.Next() {
		var i GetTransactionsActiveRow
		if err := rows.Scan(
			&i.TransactionID,
			&i.UserID,
			&i.MerchantID,
			&i.VoucherID,
			&i.NominalID,
			&i.CategoryID,
			&i.BankID,
			&i.PaymentMethod,
			&i.Status,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.DeletedAt,
			&i.TotalCount,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getTransactionsTrashed = `-- name: GetTransactionsTrashed :many
SELECT
    transaction_id, user_id, merchant_id, voucher_id, nominal_id, category_id, bank_id, payment_method, status, created_at, updated_at, deleted_at,
    COUNT(*) OVER() AS total_count
FROM transactions
WHERE deleted_at IS NOT NULL
AND ($1::TEXT IS NULL OR payment_method ILIKE '%' || $1 || '%')
ORDER BY created_at DESC
LIMIT $2 OFFSET $3
`

type GetTransactionsTrashedParams struct {
	Column1 string `json:"column_1"`
	Limit   int32  `json:"limit"`
	Offset  int32  `json:"offset"`
}

type GetTransactionsTrashedRow struct {
	TransactionID int32          `json:"transaction_id"`
	UserID        int32          `json:"user_id"`
	MerchantID    sql.NullInt32  `json:"merchant_id"`
	VoucherID     sql.NullInt32  `json:"voucher_id"`
	NominalID     sql.NullInt32  `json:"nominal_id"`
	CategoryID    sql.NullInt32  `json:"category_id"`
	BankID        sql.NullInt32  `json:"bank_id"`
	PaymentMethod string         `json:"payment_method"`
	Status        sql.NullString `json:"status"`
	CreatedAt     sql.NullTime   `json:"created_at"`
	UpdatedAt     sql.NullTime   `json:"updated_at"`
	DeletedAt     sql.NullTime   `json:"deleted_at"`
	TotalCount    int64          `json:"total_count"`
}

// Get Trashed Transactions with Pagination and Total Count
func (q *Queries) GetTransactionsTrashed(ctx context.Context, arg GetTransactionsTrashedParams) ([]*GetTransactionsTrashedRow, error) {
	rows, err := q.db.QueryContext(ctx, getTransactionsTrashed, arg.Column1, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []*GetTransactionsTrashedRow
	for rows.Next() {
		var i GetTransactionsTrashedRow
		if err := rows.Scan(
			&i.TransactionID,
			&i.UserID,
			&i.MerchantID,
			&i.VoucherID,
			&i.NominalID,
			&i.CategoryID,
			&i.BankID,
			&i.PaymentMethod,
			&i.Status,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.DeletedAt,
			&i.TotalCount,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const restoreAllTransactions = `-- name: RestoreAllTransactions :exec
UPDATE transactions
SET deleted_at = NULL
WHERE deleted_at IS NOT NULL
`

// Restore All Trashed Transactions
func (q *Queries) RestoreAllTransactions(ctx context.Context) error {
	_, err := q.db.ExecContext(ctx, restoreAllTransactions)
	return err
}

const restoreTransaction = `-- name: RestoreTransaction :one
UPDATE transactions
SET deleted_at = NULL
WHERE transaction_id = $1
  AND deleted_at IS NOT NULL
  RETURNING transaction_id, user_id, merchant_id, voucher_id, nominal_id, category_id, bank_id, payment_method, status, created_at, updated_at, deleted_at
`

// Restore Trashed Transaction
func (q *Queries) RestoreTransaction(ctx context.Context, transactionID int32) (*Transaction, error) {
	row := q.db.QueryRowContext(ctx, restoreTransaction, transactionID)
	var i Transaction
	err := row.Scan(
		&i.TransactionID,
		&i.UserID,
		&i.MerchantID,
		&i.VoucherID,
		&i.NominalID,
		&i.CategoryID,
		&i.BankID,
		&i.PaymentMethod,
		&i.Status,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return &i, err
}

const trashTransaction = `-- name: TrashTransaction :one
UPDATE transactions
SET deleted_at = CURRENT_TIMESTAMP
WHERE transaction_id = $1
  AND deleted_at IS NULL
  RETURNING transaction_id, user_id, merchant_id, voucher_id, nominal_id, category_id, bank_id, payment_method, status, created_at, updated_at, deleted_at
`

// Trash Transaction (Soft Delete)
func (q *Queries) TrashTransaction(ctx context.Context, transactionID int32) (*Transaction, error) {
	row := q.db.QueryRowContext(ctx, trashTransaction, transactionID)
	var i Transaction
	err := row.Scan(
		&i.TransactionID,
		&i.UserID,
		&i.MerchantID,
		&i.VoucherID,
		&i.NominalID,
		&i.CategoryID,
		&i.BankID,
		&i.PaymentMethod,
		&i.Status,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return &i, err
}

const updateTransaction = `-- name: UpdateTransaction :one
UPDATE transactions
SET user_id = $2,
    merchant_id = $3,
    voucher_id = $4,
    nominal_id = $5,
    category_id = $6,
    bank_id = $7,
    payment_method = $8,
    status = $9,
    updated_at = CURRENT_TIMESTAMP
WHERE transaction_id = $1
  AND deleted_at IS NULL
  RETURNING transaction_id, user_id, merchant_id, voucher_id, nominal_id, category_id, bank_id, payment_method, status, created_at, updated_at, deleted_at
`

type UpdateTransactionParams struct {
	TransactionID int32          `json:"transaction_id"`
	UserID        int32          `json:"user_id"`
	MerchantID    sql.NullInt32  `json:"merchant_id"`
	VoucherID     sql.NullInt32  `json:"voucher_id"`
	NominalID     sql.NullInt32  `json:"nominal_id"`
	CategoryID    sql.NullInt32  `json:"category_id"`
	BankID        sql.NullInt32  `json:"bank_id"`
	PaymentMethod string         `json:"payment_method"`
	Status        sql.NullString `json:"status"`
}

// Update Transaction
func (q *Queries) UpdateTransaction(ctx context.Context, arg UpdateTransactionParams) (*Transaction, error) {
	row := q.db.QueryRowContext(ctx, updateTransaction,
		arg.TransactionID,
		arg.UserID,
		arg.MerchantID,
		arg.VoucherID,
		arg.NominalID,
		arg.CategoryID,
		arg.BankID,
		arg.PaymentMethod,
		arg.Status,
	)
	var i Transaction
	err := row.Scan(
		&i.TransactionID,
		&i.UserID,
		&i.MerchantID,
		&i.VoucherID,
		&i.NominalID,
		&i.CategoryID,
		&i.BankID,
		&i.PaymentMethod,
		&i.Status,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return &i, err
}

const updateTransactionStatus = `-- name: UpdateTransactionStatus :exec
UPDATE transactions
SET 
    status = $2,
    updated_at = CURRENT_TIMESTAMP
WHERE transaction_id = $1
  AND deleted_at IS NULL
`

type UpdateTransactionStatusParams struct {
	TransactionID int32          `json:"transaction_id"`
	Status        sql.NullString `json:"status"`
}

// Update Transaction Status
func (q *Queries) UpdateTransactionStatus(ctx context.Context, arg UpdateTransactionStatusParams) error {
	_, err := q.db.ExecContext(ctx, updateTransactionStatus, arg.TransactionID, arg.Status)
	return err
}
