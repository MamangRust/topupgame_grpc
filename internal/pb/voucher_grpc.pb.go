// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.2
// source: voucher.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	VoucherService_FindAll_FullMethodName            = "/pb.VoucherService/FindAll"
	VoucherService_FindById_FullMethodName           = "/pb.VoucherService/FindById"
	VoucherService_FindByActive_FullMethodName       = "/pb.VoucherService/FindByActive"
	VoucherService_FindByTrashed_FullMethodName      = "/pb.VoucherService/FindByTrashed"
	VoucherService_Create_FullMethodName             = "/pb.VoucherService/Create"
	VoucherService_Update_FullMethodName             = "/pb.VoucherService/Update"
	VoucherService_Trashed_FullMethodName            = "/pb.VoucherService/Trashed"
	VoucherService_Restore_FullMethodName            = "/pb.VoucherService/Restore"
	VoucherService_DeletePermanent_FullMethodName    = "/pb.VoucherService/DeletePermanent"
	VoucherService_RestoreAll_FullMethodName         = "/pb.VoucherService/RestoreAll"
	VoucherService_DeleteAllPermanent_FullMethodName = "/pb.VoucherService/DeleteAllPermanent"
)

// VoucherServiceClient is the client API for VoucherService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type VoucherServiceClient interface {
	FindAll(ctx context.Context, in *FindAllVoucherRequest, opts ...grpc.CallOption) (*ApiResponsePaginationVoucher, error)
	FindById(ctx context.Context, in *FindByIdVoucherRequest, opts ...grpc.CallOption) (*ApiResponseVoucher, error)
	FindByActive(ctx context.Context, in *FindAllVoucherRequest, opts ...grpc.CallOption) (*ApiResponsePaginationVoucherDeleteAt, error)
	FindByTrashed(ctx context.Context, in *FindAllVoucherRequest, opts ...grpc.CallOption) (*ApiResponsePaginationVoucherDeleteAt, error)
	Create(ctx context.Context, in *CreateVoucherRequest, opts ...grpc.CallOption) (*ApiResponseVoucher, error)
	Update(ctx context.Context, in *UpdateVoucherRequest, opts ...grpc.CallOption) (*ApiResponseVoucher, error)
	Trashed(ctx context.Context, in *FindByIdVoucherRequest, opts ...grpc.CallOption) (*ApiResponseVoucherDeleteAt, error)
	Restore(ctx context.Context, in *FindByIdVoucherRequest, opts ...grpc.CallOption) (*ApiResponseVoucherDeleteAt, error)
	DeletePermanent(ctx context.Context, in *FindByIdVoucherRequest, opts ...grpc.CallOption) (*ApiResponseVoucherDelete, error)
	RestoreAll(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*ApiResponseVoucherAll, error)
	DeleteAllPermanent(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*ApiResponseVoucherAll, error)
}

type voucherServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewVoucherServiceClient(cc grpc.ClientConnInterface) VoucherServiceClient {
	return &voucherServiceClient{cc}
}

func (c *voucherServiceClient) FindAll(ctx context.Context, in *FindAllVoucherRequest, opts ...grpc.CallOption) (*ApiResponsePaginationVoucher, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ApiResponsePaginationVoucher)
	err := c.cc.Invoke(ctx, VoucherService_FindAll_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *voucherServiceClient) FindById(ctx context.Context, in *FindByIdVoucherRequest, opts ...grpc.CallOption) (*ApiResponseVoucher, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ApiResponseVoucher)
	err := c.cc.Invoke(ctx, VoucherService_FindById_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *voucherServiceClient) FindByActive(ctx context.Context, in *FindAllVoucherRequest, opts ...grpc.CallOption) (*ApiResponsePaginationVoucherDeleteAt, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ApiResponsePaginationVoucherDeleteAt)
	err := c.cc.Invoke(ctx, VoucherService_FindByActive_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *voucherServiceClient) FindByTrashed(ctx context.Context, in *FindAllVoucherRequest, opts ...grpc.CallOption) (*ApiResponsePaginationVoucherDeleteAt, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ApiResponsePaginationVoucherDeleteAt)
	err := c.cc.Invoke(ctx, VoucherService_FindByTrashed_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *voucherServiceClient) Create(ctx context.Context, in *CreateVoucherRequest, opts ...grpc.CallOption) (*ApiResponseVoucher, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ApiResponseVoucher)
	err := c.cc.Invoke(ctx, VoucherService_Create_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *voucherServiceClient) Update(ctx context.Context, in *UpdateVoucherRequest, opts ...grpc.CallOption) (*ApiResponseVoucher, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ApiResponseVoucher)
	err := c.cc.Invoke(ctx, VoucherService_Update_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *voucherServiceClient) Trashed(ctx context.Context, in *FindByIdVoucherRequest, opts ...grpc.CallOption) (*ApiResponseVoucherDeleteAt, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ApiResponseVoucherDeleteAt)
	err := c.cc.Invoke(ctx, VoucherService_Trashed_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *voucherServiceClient) Restore(ctx context.Context, in *FindByIdVoucherRequest, opts ...grpc.CallOption) (*ApiResponseVoucherDeleteAt, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ApiResponseVoucherDeleteAt)
	err := c.cc.Invoke(ctx, VoucherService_Restore_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *voucherServiceClient) DeletePermanent(ctx context.Context, in *FindByIdVoucherRequest, opts ...grpc.CallOption) (*ApiResponseVoucherDelete, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ApiResponseVoucherDelete)
	err := c.cc.Invoke(ctx, VoucherService_DeletePermanent_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *voucherServiceClient) RestoreAll(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*ApiResponseVoucherAll, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ApiResponseVoucherAll)
	err := c.cc.Invoke(ctx, VoucherService_RestoreAll_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *voucherServiceClient) DeleteAllPermanent(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*ApiResponseVoucherAll, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ApiResponseVoucherAll)
	err := c.cc.Invoke(ctx, VoucherService_DeleteAllPermanent_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// VoucherServiceServer is the server API for VoucherService service.
// All implementations must embed UnimplementedVoucherServiceServer
// for forward compatibility.
type VoucherServiceServer interface {
	FindAll(context.Context, *FindAllVoucherRequest) (*ApiResponsePaginationVoucher, error)
	FindById(context.Context, *FindByIdVoucherRequest) (*ApiResponseVoucher, error)
	FindByActive(context.Context, *FindAllVoucherRequest) (*ApiResponsePaginationVoucherDeleteAt, error)
	FindByTrashed(context.Context, *FindAllVoucherRequest) (*ApiResponsePaginationVoucherDeleteAt, error)
	Create(context.Context, *CreateVoucherRequest) (*ApiResponseVoucher, error)
	Update(context.Context, *UpdateVoucherRequest) (*ApiResponseVoucher, error)
	Trashed(context.Context, *FindByIdVoucherRequest) (*ApiResponseVoucherDeleteAt, error)
	Restore(context.Context, *FindByIdVoucherRequest) (*ApiResponseVoucherDeleteAt, error)
	DeletePermanent(context.Context, *FindByIdVoucherRequest) (*ApiResponseVoucherDelete, error)
	RestoreAll(context.Context, *emptypb.Empty) (*ApiResponseVoucherAll, error)
	DeleteAllPermanent(context.Context, *emptypb.Empty) (*ApiResponseVoucherAll, error)
	mustEmbedUnimplementedVoucherServiceServer()
}

// UnimplementedVoucherServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedVoucherServiceServer struct{}

func (UnimplementedVoucherServiceServer) FindAll(context.Context, *FindAllVoucherRequest) (*ApiResponsePaginationVoucher, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindAll not implemented")
}
func (UnimplementedVoucherServiceServer) FindById(context.Context, *FindByIdVoucherRequest) (*ApiResponseVoucher, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindById not implemented")
}
func (UnimplementedVoucherServiceServer) FindByActive(context.Context, *FindAllVoucherRequest) (*ApiResponsePaginationVoucherDeleteAt, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindByActive not implemented")
}
func (UnimplementedVoucherServiceServer) FindByTrashed(context.Context, *FindAllVoucherRequest) (*ApiResponsePaginationVoucherDeleteAt, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindByTrashed not implemented")
}
func (UnimplementedVoucherServiceServer) Create(context.Context, *CreateVoucherRequest) (*ApiResponseVoucher, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedVoucherServiceServer) Update(context.Context, *UpdateVoucherRequest) (*ApiResponseVoucher, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedVoucherServiceServer) Trashed(context.Context, *FindByIdVoucherRequest) (*ApiResponseVoucherDeleteAt, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Trashed not implemented")
}
func (UnimplementedVoucherServiceServer) Restore(context.Context, *FindByIdVoucherRequest) (*ApiResponseVoucherDeleteAt, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Restore not implemented")
}
func (UnimplementedVoucherServiceServer) DeletePermanent(context.Context, *FindByIdVoucherRequest) (*ApiResponseVoucherDelete, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeletePermanent not implemented")
}
func (UnimplementedVoucherServiceServer) RestoreAll(context.Context, *emptypb.Empty) (*ApiResponseVoucherAll, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RestoreAll not implemented")
}
func (UnimplementedVoucherServiceServer) DeleteAllPermanent(context.Context, *emptypb.Empty) (*ApiResponseVoucherAll, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteAllPermanent not implemented")
}
func (UnimplementedVoucherServiceServer) mustEmbedUnimplementedVoucherServiceServer() {}
func (UnimplementedVoucherServiceServer) testEmbeddedByValue()                        {}

// UnsafeVoucherServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to VoucherServiceServer will
// result in compilation errors.
type UnsafeVoucherServiceServer interface {
	mustEmbedUnimplementedVoucherServiceServer()
}

func RegisterVoucherServiceServer(s grpc.ServiceRegistrar, srv VoucherServiceServer) {
	// If the following call pancis, it indicates UnimplementedVoucherServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&VoucherService_ServiceDesc, srv)
}

func _VoucherService_FindAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindAllVoucherRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VoucherServiceServer).FindAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: VoucherService_FindAll_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VoucherServiceServer).FindAll(ctx, req.(*FindAllVoucherRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VoucherService_FindById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindByIdVoucherRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VoucherServiceServer).FindById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: VoucherService_FindById_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VoucherServiceServer).FindById(ctx, req.(*FindByIdVoucherRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VoucherService_FindByActive_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindAllVoucherRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VoucherServiceServer).FindByActive(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: VoucherService_FindByActive_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VoucherServiceServer).FindByActive(ctx, req.(*FindAllVoucherRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VoucherService_FindByTrashed_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindAllVoucherRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VoucherServiceServer).FindByTrashed(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: VoucherService_FindByTrashed_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VoucherServiceServer).FindByTrashed(ctx, req.(*FindAllVoucherRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VoucherService_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateVoucherRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VoucherServiceServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: VoucherService_Create_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VoucherServiceServer).Create(ctx, req.(*CreateVoucherRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VoucherService_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateVoucherRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VoucherServiceServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: VoucherService_Update_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VoucherServiceServer).Update(ctx, req.(*UpdateVoucherRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VoucherService_Trashed_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindByIdVoucherRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VoucherServiceServer).Trashed(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: VoucherService_Trashed_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VoucherServiceServer).Trashed(ctx, req.(*FindByIdVoucherRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VoucherService_Restore_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindByIdVoucherRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VoucherServiceServer).Restore(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: VoucherService_Restore_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VoucherServiceServer).Restore(ctx, req.(*FindByIdVoucherRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VoucherService_DeletePermanent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindByIdVoucherRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VoucherServiceServer).DeletePermanent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: VoucherService_DeletePermanent_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VoucherServiceServer).DeletePermanent(ctx, req.(*FindByIdVoucherRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VoucherService_RestoreAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VoucherServiceServer).RestoreAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: VoucherService_RestoreAll_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VoucherServiceServer).RestoreAll(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _VoucherService_DeleteAllPermanent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VoucherServiceServer).DeleteAllPermanent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: VoucherService_DeleteAllPermanent_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VoucherServiceServer).DeleteAllPermanent(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

// VoucherService_ServiceDesc is the grpc.ServiceDesc for VoucherService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var VoucherService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pb.VoucherService",
	HandlerType: (*VoucherServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "FindAll",
			Handler:    _VoucherService_FindAll_Handler,
		},
		{
			MethodName: "FindById",
			Handler:    _VoucherService_FindById_Handler,
		},
		{
			MethodName: "FindByActive",
			Handler:    _VoucherService_FindByActive_Handler,
		},
		{
			MethodName: "FindByTrashed",
			Handler:    _VoucherService_FindByTrashed_Handler,
		},
		{
			MethodName: "Create",
			Handler:    _VoucherService_Create_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _VoucherService_Update_Handler,
		},
		{
			MethodName: "Trashed",
			Handler:    _VoucherService_Trashed_Handler,
		},
		{
			MethodName: "Restore",
			Handler:    _VoucherService_Restore_Handler,
		},
		{
			MethodName: "DeletePermanent",
			Handler:    _VoucherService_DeletePermanent_Handler,
		},
		{
			MethodName: "RestoreAll",
			Handler:    _VoucherService_RestoreAll_Handler,
		},
		{
			MethodName: "DeleteAllPermanent",
			Handler:    _VoucherService_DeleteAllPermanent_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "voucher.proto",
}
